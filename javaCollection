1.ArrayList

底层是数组，数组的长度动态增加，初始长度是10，每次扩容0.5倍。查找快，扩容因子不可改。

2.LinkedList
底层是双链表，数组的长度动态增加，初始长度是10，每次扩容0.5倍 修改快

3.HashMap
底层是散列表，红黑树。散列表由数组和链表构成，放入HashMap的key和value首先会被放到一个结点对象中，再用key计算hash值来确定数组的下标，并根据下标把存了key和value
的结点对象放到数组，如果放入的键值对的key值计算出的hash值相同，就会调用key对象的equals方法进行判断，如果是true，说明两个key对象是同一个对象，新的value
值覆盖掉原先结点对象里的value值，如果是false，说明是新的key对象，就产生了哈希冲突，原来结点对象就会指向现在添加的结点对象。
hashmap的初始容量是16，负载因子是0.75，所以存储的数据超过12个就开始扩容，每次扩容是之前的两倍，当扩容到64，同时又一条引用链上的key对象达到8个时，
为了避免哈希冲突导致的性能下降，链就变成红黑树，变成TreeMap。

4.Currenthashmap
1.7通过增加了一个segment数组，对原理的hash桶数组进行分段并在每段各都加锁，实现的是ReentrantLock。键值对放入时先用key计算hash值找到segment数组得下标,
计算hash值找到hash桶数组的下标，
这样让锁分段提高了并发性能。
1.8去掉了segment的数据结构，只在存放key和value的结点类中对value和next指针域加了volatile关键字，再用CAS算法实现线程安全。
